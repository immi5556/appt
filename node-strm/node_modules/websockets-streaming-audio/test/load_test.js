
var shared_utils = require("shared-utils");


// ----------   Node.js load test 


var WebSocket = require('ws');
var log = require('npmlog');

log.level = 'verbose';

var sockets = [];
var maxSockets = 1; // max 400
var connectionAttempts = 0;
var request_msg = null;

// ---


var msg_to_server_stream_2 = { 

	mode: 'mode_stream_audio',
	requested_action: 'stream_audio_to_client',
	transmit_chunksize: 32768,
	BUFF_SIZE_AUDIO_RENDERER: 16384,
	browser_queue_min_threshold: 6,
	browser_queue_max_size: 10,
	ww_queue_max_size: 40,
	request_number: 1421263107489,
	browser_directed_mode: 'browser_get_audio_from_server',
	requested_source: 'sine_wave_32768_128.wav' 
};

var msg_to_server_stream_13 = { 

	mode: 'mode_stream_audio',
	requested_action: 'stream_audio_to_client',
	transmit_chunksize: 32768,
	BUFF_SIZE_AUDIO_RENDERER: 16384,
	browser_queue_min_threshold: 6,
	browser_queue_max_size: 10,
	ww_queue_max_size: 40,
	request_number: 1421263107489,
	browser_directed_mode: 'browser_get_audio_from_server',
	requested_source: 'SHAKUHACHI_Masayuki_Koga_trim_mono-IMi00aV1tdA.wav' 
};



function run_with_connection(web_socket) {

	log.info("hello Corinde");

	var curr_request_number = new Date().getTime();

	log.info("curr_request_number " + curr_request_number);

	var msg_to_server = msg_to_server_stream_2;
	// var msg_to_server = msg_to_server_stream_13;

	msg_to_server.request_number = curr_request_number;

	request_msg = JSON.stringify(msg_to_server);

	web_socket.send(request_msg);

}

function connectToWebSocket() {

	connectionAttempts++;

	// var sockets = {};

	var web_socket;

	(function() {

		web_socket = new WebSocket("http://localhost:8888/");
	})();

    web_socket.binaryType = 'arraybuffer';

	web_socket.on('open', function() {

	    log.info("Connected " + connectionAttempts);

	    web_socket.binaryType = "arraybuffer"; // stens TODO - added April 30 2014

	    run_with_connection(web_socket);
	});

	web_socket.on('error', function() {
	    log.error('Error');
	});

	web_socket.on('close', function() {
	    log.warn('Closed');
	});

	// sockets.push(web_socket);

	// if (connectionAttempts < maxSockets) {
	// setTimeout(connectToWebSocket, 500);
  	// }

  // ---

    web_socket.onmessage = function(event) {        //      receive message from server side

        // console.log("top of onmessage");

        if (typeof event.data === "string") {

        	// console.log("cool receive from server : " + event.data);

        	var received_json = JSON.parse(event.data);

            if (typeof received_json.streaming_is_done !== "undefined") {

                if ("yes" == received_json.streaming_is_done) {

                    console.log("OK received_json.streaming_is_done == yes");

                    web_socket.close();

                    // cb_stream_is_complete(local_max_index);
                }

            } else if (typeof received_json.rss !== "undefined") {

            	// ignore for now

            } else if (typeof received_json.max_index !== "undefined") {

            	// ignore for now

            } else if (typeof received_json.sample_rate !== "undefined") {

            	console.log("cool seeing sample_rate");

            } else {

            	console.log("BUT seeing string .... dunno");

            	console.log(received_json);
            }

        } else if (event.data instanceof ArrayBuffer) {

            console.log("RECEIVED --- ");
            console.log("RECEIVED --- ArrayBuffer");
            console.log("RECEIVED --- ");

            // var server_side_buffer_obj = {};

            // server_side_buffer_obj.buffer = new Float32Array(event.data);

            // var server_buffer_len = server_side_buffer_obj.buffer.length;

            // console.log("received buffer length " + server_buffer_len);

            // ---

            // cb_for_client(server_side_buffer_obj);

            // followup with next server side request for another buffer

            web_socket.send(request_msg);

        } else  {

            console.log("cool receive from server NON instanceof ArrayBuffer");            

        	// shared_utils.show_object(event.data, "ceoeoeoeoeoe   event.data  ", "total", 30);

            var received_data = event.data;

        	var server_side_buffer_obj = {};


            var retrieved_length = received_data.length;

            // convert four bytes into one 32 bit float

            var float_array_obj = {};

            float_array_obj.buffer = new Float32Array(retrieved_length / Float32Array.BYTES_PER_ELEMENT);

            console.log("received buffer length " + retrieved_length);

            var max_view_index = 4;

            for (var index = 0, float_index = 0; index < retrieved_length; index += 4, float_index += 1) {

                float_array_obj.buffer[float_index] = new Float32Array((new Uint8Array([
                                                                    received_data[index + 0],
                                                                    received_data[index + 1],
                                                                    received_data[index + 2],
                                                                    received_data[index + 3]])).buffer)[0];
                // ----------

                if (float_index < max_view_index) {

                    console.log(float_index + " output float ---> " + float_array_obj.buffer[float_index]);
                
                    // ---------- convert back from 32 bit float into 4 byte signed ints --------

                    // new Uint8Array((new Float32Array([f])).buffer);

                    var curr_int_array = new Uint8Array((new Float32Array([float_array_obj.buffer[float_index]])).buffer);

                    for (var curr_int_index = 0; curr_int_index < 4; curr_int_index += 1) {

                        console.log("curr_int_array " + curr_int_array[curr_int_index]);
                    }


                    // shared_utils.show_object(curr_int_array, "curr_int_array  ", "total", 30);

                    // ------------



                    // var curr_float =    received_data[index + 0]       | 
                    //                     received_data[index + 1] << 8  |
                    //                     received_data[index + 2] << 16 |
                    //                     received_data[index + 3] << 24;


                    var curr_float =    received_data[index + 0] << 24 | 
                                        received_data[index + 1] << 16 |
                                        received_data[index + 2] << 8  |
                                        received_data[index + 3];



                    // float_array[float_index] =  received_data[index + 0] << 24  | 
                    //                             received_data[index + 1] << 16  |
                    //                             received_data[index + 2] << 8   |
                    //                             received_data[index + 3];

                    // console.log("input offset 0 " + received_data[index + 0]);
                    // console.log("input offset 1 " + received_data[index + 1]);
                    // console.log("input offset 2 " + received_data[index + 2]);
                    // console.log("input offset 3 " + received_data[index + 3]);

                    console.log("curr_float " + curr_float);





                }
            }


            // ---------- nnow write audio buffer to output file

            var output_filename = "/usr/tmp/received_audio_file.wav";

            shared_utils.write_32_bit_float_buffer_to_16_bit_wav_file(float_array_obj, output_filename);

            // write_32_bit_float_buffer_to_16_bit_wav_file(audio_obj, wav_output_filename, spec, db_done);

            // var arrayBuf = new ArrayBuffer(retrieved_length);
            // var uint8View = new Uint8Array(arrayBuf);

            // for (var i = 0; i < retrieved_length; i++) {
            
            //     uint8View[i] = event.data[i];
            // }
            
            // for (var curr_property in event.data) {

            //     if (event.data.hasOwnProperty(curr_property)) {

            //         console.log(event.data[curr_property]);
            //     }

            //     index += 1;
            //     if (index > max_index) {

            //         break;
            //     }
            // }

            // return uint8View.buffer;

            // var server_buffer_len = uint8View.length;

            // console.log("received buffer length " + server_buffer_len);


            // server_side_buffer_obj.buffer = new Float32Array(uint8View);

            // // server_side_buffer_obj.buffer = new Float32Array(uint8View, 0, Float32Array.BYTES_PER_ELEMENT);


            // // var ba = new Uint8Array(fa.buffer, 0, Float32Array.BYTES_PER_ELEMENT); // First float of fa.




            // var size_float = server_side_buffer_obj.buffer.length;

            // console.log("received size_float length " + size_float);



            // server_side_buffer_obj.buffer = new Float32Array(event.data);

            // var new_32_bit_float = shared_utils.convert_16_bit_unsigned_int_to_32_bit_float(event.data);

            // var array_buffer = new ArrayBuffer(event.data);
            // server_side_buffer_obj = new Float32Array(array_buffer);

            // var local_received_typed_array = new UInt8Array(event.data);
            // var local_received_typed_array = new Buffer(event.data);

            // var server_buffer_len = local_received_typed_array.length;

            // console.log("received buffer length " + server_buffer_len);




            // server_side_buffer_obj = new Float32Array(local_received_typed_array);

            // var size_float = server_side_buffer_obj.length;

            // console.log("received size_float length " + size_float);

            // shared_utils.show_object(new_32_bit_float, "new_32_bit_float  ", "total", 30);

        	// var received_data = event.data;

        	// var max_rows_to_see = 50;
        	// var curr_row = 0;



        	/*
        	for (var curr_property in server_side_buffer_obj) {

        		if (server_side_buffer_obj.hasOwnProperty(curr_property)) {

        			console.log("nnnn " + curr_property + "  " + 
        							server_side_buffer_obj[curr_property]);
        		}

        		curr_row += 1;

        		if (curr_row > max_rows_to_see) {

        			break;
        		}
        	}
        	*/
        }
    };
}

connectToWebSocket();

